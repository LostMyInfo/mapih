export type AnthropicMessage = {
  /**
   * - Unique object identifier for the message
   */
  id: string;
  /**
   * - Object type. For Messages, this is always `message`.
   */
  type: string;
  /**
   * ### Conversational role of the generated message.
   * This will always be `assistant`.
   */
  role: number;
  /**
   * - The model that handled the request.
   */
  model: string;
  /**
   * - Content generated by the model.
   */
  content: AnthropicMessageContent[];
  /**
   * ### The reason that we stopped.
   * This may be one of the following:
   * - `end_turn`: the model reached a natural stopping point
   * - `max_tokens`: we exceeded the requested `max_tokens` or the model's maximum
   * - `stop_sequence`: one of your provided custom `stop_sequences` was generated
   * - `tool_use`: the model invoked one or more tools
   *
   * In non-streaming mode this value is always non-null. In streaming mode, it is null in the message_start event and non-null otherwise.
   */
  stop_reason: string | null;
  /**
   * ### Which custom stop sequence was generated, if any.
   * This value will be a non-null string if one of your custom stop sequences was generated.
   */
  stop_sequence: string | null;

  /**
   * ### Billing and rate-limit usage.
   */
  usage: AnthropicUsage;
};

export type AnthropicMessageContent = {
  /**
   * ### The type of the message.
   *  - For Messages, this is always `text`.
   *  - For Tool Use, this is always `tool_use`.
   */
  type: string;
  /**
   * - The contents of the message. Only present for `Messages`.
   */
  text?: string;
  /**
   * - The ID of the message. Only present for `Tool Use`.
   */
  id?: string;
  /**
   * - The name of the tool. Only present for `Tool Use`.
   */
  name?: string;
  input?: Record<string, AnthropicToolProperty>;
};

export type AnthropicUsage = {
  /**
   * ### The number of input tokens which were used.
   */
  input_tokens: number;
  /**
   * ### The number of output tokens which were used.
   */
  output_tokens: number;
  /**
   * ### The number of input tokens used to create the cache entry (prompt caching beta).
   */
  cache_creation_input_tokens: number | null;
  /**
   * ### The number of input tokens read from the cache (prompt caching beta).
   */
  cache_read_input_tokens: number | null;
};

export type AnthropicContentBlock = {
  text: string;
  type: 'text';
}

export type AnthropicTextBlock = {
  text: string;
  type?: 'text';
}

export type AnthropicImageBlockParam = {
  source: AnthropicImageBlockParamSource;
  type?: 'image';
}

export type AnthropicImageBlockParamSource = {
  data: string;
  media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';
  type?: 'base64';
}

export type AnthropicMessageParam = {
  content: string | (AnthropicTextBlock | AnthropicImageBlockParam)[];
  role: 'user' | 'assistant';
}

export type AnthropicSystemCache = {
  type: string;
  text: string;
  cache_control: { type: string; } | null;
}

export type AnthropicMessageCreateParams = {
  model: string;
  max_tokens: number;
  messages: AnthropicMessageParam[];
  metadata?: {
    user_id: string | null;
  };
  stop_sequence?: string[];
  stream?: boolean;
  system?: string;
  temperature?: number;
  top_k?: number;
  top_p?: number;
  tool_choice?: { type: string; name?: string; };
  tools?: AnthropicTools[]
}

export interface AnthropicTool<T extends Record<string, AnthropicToolProperty> = Record<string, AnthropicToolProperty>> {
  name: string;
  description: string;
  input_schema: AnthropicToolInputSchema<T>;
  cache_control?: { type: string; } | null;
}

export interface AnthropicToolInputSchema<T extends Record<string, AnthropicToolProperty> = Record<string, AnthropicToolProperty>> {
  type: 'object';
  properties?: T | null;
  required?: (keyof T)[];
}

export interface AnthropicToolProperty {
  type: 'string' | 'number' | 'boolean' | 'array' | 'object';
  description?: string;
  enum?: string[];
  items?: AnthropicToolProperty; // For array types
  properties?: Record<string, AnthropicToolProperty>; // For object types
  required?: string[]; // For object types
}

export interface ToolChoice {
  type: "auto" | "none";
  tool?: {
    name: string;
  };
}

export interface ToolChoiceFunction {
  type: "function";
  name: string;
}

export type ToolChoiceOption = ToolChoice | ToolChoiceFunction | "auto" | "none";
